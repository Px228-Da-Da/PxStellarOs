from PyQt6.QtWidgets import QVBoxLayout, QWidget, QTabWidget, QPushButton, QLineEdit, QHBoxLayout, QToolBar
from PyQt6.QtWebEngineWidgets import QWebEngineView
from PyQt6.QtWebEngineCore import QWebEngineProfile, QWebEnginePage  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç QWebEnginePage
from PyQt6.QtCore import QUrl, QStandardPaths
from PyQt6.QtGui import QIcon
from apps.local.init import DraggableResizableWindow  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –æ–∫–Ω–∞

class BrowserWindow(DraggableResizableWindow):
    def __init__(self, parent=None, window_name=""):
        super().__init__(parent)
        self.parent_window = parent
        self.window_name = window_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –æ–∫–Ω–∞

        self.setGeometry(200, 100, 800, 600)

        self.tab_widget = QTabWidget(self)
        self.set_content(self.tab_widget)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞ –∏ –∫—É–∫–æ–≤
        self.profile = QWebEngineProfile("BrowserProfile", self)
        cache_path = QStandardPaths.writableLocation(QStandardPaths.StandardLocation.CacheLocation)
        self.profile.setCachePath(cache_path)
        self.profile.setPersistentStoragePath(cache_path)

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        self.add_search_and_buttons_to_title_bar()

        self.add_tab("https://www.google.com")
        self.hide()

    def add_search_and_buttons_to_title_bar(self):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞.
        """
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_style = "font-size: 18px; padding: 5px; width: 20px; height: 20px; background-color: transparent; border: none;"

        back_button = QPushButton("‚¨ÖÔ∏è")
        back_button.setStyleSheet(button_style)
        forward_button = QPushButton("‚û°Ô∏è")
        forward_button.setStyleSheet(button_style)
        reload_button = QPushButton("üîÅ")
        reload_button.setStyleSheet(button_style)
        new_tab_button = QPushButton("‚ûï")
        new_tab_button.setStyleSheet(button_style)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∫ –∫–Ω–æ–ø–∫–∞–º
        back_button.clicked.connect(lambda: self.tab_widget.currentWidget().back())
        forward_button.clicked.connect(lambda: self.tab_widget.currentWidget().forward())
        reload_button.clicked.connect(lambda: self.tab_widget.currentWidget().reload())
        new_tab_button.clicked.connect(lambda: self.add_tab())

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è URL
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("Enter URL or search")
        self.search_input.setStyleSheet("background-color: white; color: black; padding: 5px; border-radius: 10px;")
        self.search_input.returnPressed.connect(self.load_url)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        self.add_title_widget(back_button)
        self.add_title_widget(forward_button)
        self.add_title_widget(reload_button)
        self.add_title_widget(self.search_input)
        self.add_title_widget(new_tab_button)

    def add_tab(self, url="https://www.google.com"):
        browser = QWebEngineView()
        browser.setStyleSheet("background-color: #D1D1D1; border-bottom-left-radius: 15px; border-bottom-right-radius: 15px;")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏
        browser.setPage(QWebEnginePage(self.profile, browser))
        
        browser.setUrl(QUrl(url))
        self.tab_widget.addTab(browser, f"Tab {self.tab_widget.count() + 1}")
        self.tab_widget.setCurrentWidget(browser)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ URL —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
        def update_search_input_on_change(url):
            self.search_input.setText(url.toString())

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ urlChanged –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
        def connect_url_changed():
            current_browser = self.tab_widget.currentWidget()
            if current_browser:
                current_browser.urlChanged.connect(update_search_input_on_change)

        self.tab_widget.currentChanged.connect(connect_url_changed)
        connect_url_changed()

    def load_url(self):
        url = self.search_input.text()
        if self.tab_widget.currentWidget():
            self.tab_widget.currentWidget().setUrl(QUrl(url))

    def switch_window(self, window_name):
        window_name = window_name.strip()

        if window_name.lower() == "desktop":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–∞–±–æ—á–∏–º —Å—Ç–æ–ª–æ–º
            for win in self.open_windows.values():
                if win:
                    win.hide()  # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ–∫–Ω–∞
            self.active_window_name = "desktop"
            return

        window = self.open_windows.get(window_name)
        self.active_windows[window_name] = True
        self.update_dock_indicators()
        self.active_window_name = window_name  

        if window is not None:
            try:
                if window.isHidden() or window.minimized:
                    window.show()
                    window.minimized = False
                    window.raise_()
                    window.activateWindow()
                else:
                    window.close_window()
                    self.open_windows[window_name] = None
            except RuntimeError:
                print(f"–û–∫–Ω–æ {window_name} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ. –°–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ...")
                self.open_windows[window_name] = getattr(self, f"create_{window_name}_window")()
                self.open_windows[window_name].show()
        else:
            print(f"–°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ {window_name}")
            self.open_windows[window_name] = getattr(self, f"create_{window_name}_window")()
            self.open_windows[window_name].show()
